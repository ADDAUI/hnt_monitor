get_configs() {
  for c in ${HNT_HOME}/conf/*.conf; do
    . "${c}"
  done
}

get_addresses() {
  log_debug "getting hotspot addresses"
  addresses=
  pg_hosts=
  if [[ "${collector_storage_profile}" == *"local"* ]] || [ ! "${collector_storage_profile}" ]; then
    client_id=${client_id:-"${client_api_key,,}"}
    addresses=$(< ${HNT_HOME}/conf/address.list)
    addresses="${client_id}:${addresses// /###}"
  fi

  if [[ "${collector_storage_profile}" == *"elasticsearch"* ]] && [ "${elasticsearch_url}" ]; then
    get_addresses_elasticsearch

    client_ids=$(jq -r '.client_id' <<< "${es_addresses_payload}" 2>/dev/null) || log_err "could not get the hotspot client_ids"
    
    if [ "${id}" == "etl.block.height" ]; then
      prometheus_pg_host="$(jq -r '.prometheus_pg_host' <<< "${es_addresses_payload}" 2>/dev/null)" || log_err "could not get the clients prometheus pg hosts"
    fi

    for c in ${client_ids}; do
      if [ "${addresses}" ]; then
        addresses="${addresses} ${c}:$(jq -r --arg c "${c}" 'select(.client_id == $c) | .addresses' <<< "${es_addresses_payload}" 2>/dev/null | sed 's% %###%g')"
      else
        addresses="${c}:$(jq -r --arg c "${c}" 'select(.client_id == $c) | .addresses' <<< "${es_addresses_payload}" 2>/dev/null | sed 's% %###%g')"
      fi

      if [ "${pg_hosts}" ]; then
        pg_hosts="${pg_hosts} ${c}:$(jq -r --arg c "${c}" 'select(.client_id == $c) | .prometheus_pg_host' <<< "${es_addresses_payload}" 2>/dev/null | sed 's% %###%g')"    
      else
        pg_hosts="${c}:$(jq -r --arg c "${c}" 'select(.client_id == $c) | .prometheus_pg_host' <<< "${es_addresses_payload}" 2>/dev/null | sed 's% %###%g')"
      fi
    done
  fi
  log_debug "get.addresses response [${addresses//###/ }] [${prometheus_pg_host//###/ }]"

  if [ "${bobcat_ips}" ]; then
    bobcat_ips="${client_api_key,,}:${bobcat_ips// /###}"
    log_debug "get.miner.bobcat.ips response [${bobcat_ips//###/ }]"
  fi

  if [ "${longap_addresses}" ]; then
    longap_addresses="${client_api_key,,}:${longap_addresses// /###}"
    log_debug "get.miner.longap.addresses response [${longap_addresses//###/ }]"
  fi

  if [ "${nebra_ips}" ]; then
    nebra_ips="${client_api_key,,}:${nebra_ips// /###}"
    log_debug "get.miner.nebra.ips response [${nebra_ips//###/ }]"
  fi

  if [ "${sensecap_serial_numbers}" ]; then
    sensecap_serial_numbers="${client_api_key,,}:${sensecap_serial_numbers// /###}"
    log_debug "get.miner.sensecap.serial.numbers response [${sensecap_serial_numbers//###/ }]"
  fi
}

get_addresses_elasticsearch() {
  if [[ "${collector_storage_profile}" == *"elasticsearch"* ]] && [ "${elasticsearch_url}" ]; then
    get_curl_options
    es_addresses_payload=$(curl ${curl_options} -H "apikey: ${client_api_key}" -H "Content-Type: application/json" "${elasticsearch_url}/hnt-*/_search?q=_id:addresses" | jq '.hits.hits[]._source' 2>/dev/null) || log_err "could not retrieve [addresses] elasticsearch results"
    log_debug "get.addresses.elasticsearch response $(jq -c <<< "${es_addresses_payload}")"
  fi
}

get_curl_options() {
  curl_options="-s -L"
  if [ "${insecure_api}" == "true" ]; then
    curl_options="${curl_options} -k"
  fi
}

get_prometheus_pg_host() {
  if [[ "${collector_storage_profile}" == *"elasticsearch"* ]] && [ "${elasticsearch_url}" ]; then
    prometheus_pg_host="$(echo "${pg_hosts}" | tr ' ' '\n' | grep "^${client_id}" | sed "s%^${client_id}:%%;s%###% %g")"
  fi
}

send_addresses_elasticsearch() {
  if [ "${elasticsearch_url}" ]; then
    hotspot=$(< ${HNT_HOME}/conf/address.list)
    hotspot=$(echo "${hotspot}" | tr '\n' ' ' | sed "s% $%%;s%^%{ \"addresses\": \"%;s%$%\" }%")
    bobcat=$(echo "${bobcat_ips}" | sed "s% $%%;s%^%{ \"bobcat_ips\": \"%;s%$%\" }%")
    longap=$(echo "${longap_addresses}" | sed "s% $%%;s%^%{ \"longap_addresses\": \"%;s%$%\" }%")
    nebra=$(echo "${nebra_ips}" | sed "s% $%%;s%^%{ \"nebra_ips\": \"%;s%$%\" }%")
    sensecap=$(echo "${sensecap_serial_numbers}" | sed "s% $%%;s%^%{ \"sensecap_serial_numbers\": \"%;s%$%\" }%")
    client="{ \"client_id\": \"${client_api_key,,}\" }"
    prometheus=$(echo "${prometheus_pg_host}" | sed "s% $%%;s%^%{ \"prometheus_pg_host\": \"%;s%$%\" }%")
    jq -s '(.[0] + .[1] + .[2] + .[3] + .[4] + .[5] + .[6])' <<< "${hotspot} ${bobcat} ${longap} ${nebra} ${sensecap} ${client} ${prometheus}" > /tmp/addresses || log_err "could not create address list"
      
    get_curl_options
    es_post=$(curl ${curl_options} -X POST -H "apikey: ${client_api_key}" -H "Content-Type: application/json" "${elasticsearch_url}/hnt-${client_api_key,,}/_doc/addresses" -d @/tmp/addresses) || log_err "could not send [addresses] to elasticsearch"
    rm -f /tmp/addresses
    log_debug "send.addresses.elasticsearch response ${es_post}"
  fi
}
