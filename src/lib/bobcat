#!/usr/bin/env bash

set -euo pipefail

export PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/root/bin

SOURCE="${BASH_SOURCE[0]}"
while [ -h "$SOURCE" ]; do # resolve $SOURCE until the file is no longer a symlink
  DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
  SOURCE="$(readlink "$SOURCE")"
  [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE" # if $SOURCE was a relative symlink, we need to resolve it relative to the path where the symlink file was located
done
DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
cd ${DIR}

for c in ../conf/*.conf; do
  . "${c}"
done

if [ ${trace} == "true" ]; then
  set -x
fi

if [ "${bobcat_monitor}" == "true" ]; then
  echo "$(date +%Y-%m-%dT%H:%M:%S) [INFO]: Starting bobcat monitor run" >> "${logpath}/${logfile}"

  for M in ${bobcat_ips}; do
    echo "$(date +%Y-%m-%dT%H:%M:%S) [INFO]: getting bobcat temperature for - ${M}" >> "${logpath}/${logfile}"
    name=$(cat .bobcat.cache 2>/dev/null | grep "${M}" | awk '{print $2}') || echo "$(date +%Y-%m-%dT%H:%M:%S) [WARN]: No name cached for ${M}" >> "${logpath}/${logfile}"
    
    if [ ! "${name}" ]; then
      name=$(curl -s http://${M}/ | grep "/header" | sed 's%.*> \(.*\)</.*%\1%;s% %-%g' | tr 'A-Z' 'a-z') || echo "$(date +%Y-%m-%dT%H:%M:%S) [WARN]: Could not get bobcat miner name" >> "${logpath}/${logfile}"
      echo "${M}: ${name}" >> .bobcat.cache
      echo "$(date +%Y-%m-%dT%H:%M:%S) [INFO]: Storing bobcat miner ${M} - ${name}" >> "${logpath}/${logfile}"

    elif [ "$(echo "${name}" | wc -l | tr -dc .[:print:].)" -gt 1 ]; then
      echo "$(date +%Y-%m-%dT%H:%M:%S) [WARN]: Found duplicate entries for ${M}" >> "${logpath}/${logfile}"
      name=$(curl -s http://${M}/ | grep "/header" | sed 's%.*> \(.*\)</.*%\1%;s% %-%g' | tr 'A-Z' 'a-z') || echo "$(date +%Y-%m-%dT%H:%M:%S) [WARN]: Could not get bobcat miner name" >> "${logpath}/${logfile}"
      sed -i "s%${M}:.*%%g" .bobcat.cache
      echo "${M}: ${name}" >> .bobcat.cache
      echo "$(date +%Y-%m-%dT%H:%M:%S) [INFO]: Storing bobcat miner ${M} - ${name}" >> "${logpath}/${logfile}"
    fi

    temp=$(curl -s http://${M}/temp.json) || echo "$(date +%Y-%m-%dT%H:%M:%S) [ERROR]: code $? - could not retrieve bobcat temperature" >> "${logpath}/${logfile}"

    cat <<EOF | curl -s --data-binary @- http://${prometheus_pg_host}:${prometheus_pg_port}/metrics/job/${project}
# HELP bobcat_miner_temperature of the bobcat miner cpu
# TYPE bobcat_miner_temperature gauge
${project}_temperature{instance="${name}",core="0"} $(jq '.temp0' <<< "${temp}")
${project}_temperature{instance="${name}",core="1"} $(jq '.temp1' <<< "${temp}")
EOF
    [ "${debug}" == "true" ] && echo "$(date +%Y-%m-%dT%H:%M:%S) [DEBUG]: bobcat temperature core0: $(jq '.temp0' <<< "${temp}"); core1: $(jq '.temp1' <<< "${temp}")"
  done

  echo "$(date +%Y-%m-%dT%H:%M:%S) [INFO]: Bobcat monitor run complete" >> "${logpath}/${logfile}"
else
  [ "${debug}" == "true" ] && echo "$(date +%Y-%m-%dT%H:%M:%S) [DEBUG]: Bobcat monitor collection is disabled. Hint: (bobcat_monitor=false)" >> "${logpath}/${logfile}"
  true
fi
