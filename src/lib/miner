get_miner_bobcat_name() {
  name=$(jq -r '.animal' "${data_dir}"/miner.bobcat/${a}.miner 2> /dev/null)  || log_warn "No name found for ${a}"
  
  if [ ! "${name}" ]; then
    name=$(curl -s http://${a}/ | grep "/header" | sed 's%.*> \(.*\)</.*%\1%;s% %-%g' | tr 'A-Z' 'a-z') || log_err "Could not collect [name] on ${a}"
  fi
}

get_miner_bobcat_temp() {
  temp0=$(jq -r '.temp0' "${data_dir}"/miner.bobcat/${a}.temp 2> /dev/null) || log_err "Could not collect [temp0] on ${a}"
  temp1=$(jq -r '.temp1' "${data_dir}"/miner.bobcat/${a}.temp 2> /dev/null) || log_err "Could not collect [temp1] on ${a}"
}

get_miner_bobcat_status() {
  stat=$(jq -r '.status' "${data_dir}"/miner.bobcat/${a}.status 2> /dev/null) || log_err "Could not collect [status] on ${a}"
  if [ "${stat}" == "synced" ]; then
    status=1
  else
    status=0
  fi

  miner_height=$(jq -r '.miner_height' "${data_dir}"/miner.bobcat/${a}.status 2> /dev/null) || log_err "Could not collect [miner height] on ${a}"
  block_height=$(jq -r '.blockchain_height' "${data_dir}"/miner.bobcat/${a}.status 2> /dev/null) || log_err "Could not collect [block height] on ${a}"
  epoch=$(jq -r '.epoch' "${data_dir}"/miner.bobcat/${a}.status 2> /dev/null) || log_err "Could not collect [epoch timestamp] on ${a}"
  gap=$((miner_height - block_height)) || log_err "Could not collect [height gap] on ${a}"
}

get_miner_longap_name() {
  name=$(jq -r '.[].name' "${data_dir}"/miner.longap/${a}.status 2> /dev/null) || log_warn "Could not collect [name] on ${a}"
}

get_miner_longap_data() {
  stat=$(jq -r '.[].status' "${data_dir}"/miner.longap/${a}.status 2> /dev/null) || log_err "Could not collect [status] on ${a}"
  if [ "${stat}" == "online" ]; then
    status=1
  else
    status=0
  fi

  block_height=$(jq -r '.[].helium.blockchain.height' "${data_dir}"/miner.longap/${a}.status 2> /dev/null) || log_err "Could not collect [block height] on ${a}"
  miner_height=$(jq -r '.[].miner.blockHeight' "${data_dir}"/miner.longap/${a}.status 2> /dev/null) || log_err "Could not collect [miner height] on ${a}"

  conn=$(jq -r '.[].miner.connected' "${data_dir}"/miner.longap/${a}.status 2> /dev/null) || log_err "Could not collect [connection status] on ${a}"
  if [ "${conn}" == "true" ]; then
    connected=1
  else
    connected=0
  fi
  gap=$((miner_height - block_height))
}

get_miner_nebra_name() {
  name=$(jq -r '.AN' "${data_dir}"/miner.nebra/${a}.data 2> /dev/null) || log_warn "Could not collect [name] on ${a}"
}

get_miner_nebra_data() {
  block_height=$(jq -r '.BCH' "${data_dir}"/miner.nebra/${a}.data 2> /dev/null) || log_err "Could not collect [block height] on ${a}"
  frequency=$(jq -r '.FR' "${data_dir}"/miner.nebra/${a}.data 2> /dev/null)  || log_err "Could not collect [frequency] on ${a}"
  miner_height=$(jq -r '.MH' "${data_dir}"/miner.nebra/${a}.data 2> /dev/null) || log_err "Could not collect [miner height] on ${a}"
  gap=$((miner_height - block_height))

  status=$(jq -r '.BSP' "${data_dir}"/miner.nebra/${a}.data 2> /dev/null) || log_err "Could not collect [status] on ${a}"
  if [[ "${status}" == *"load"* ]]; then
    sync_status=0
  else
    sync_status=${status}
  fi

  bt_conn=$(jq -r '.BT' "${data_dir}"/miner.nebra/${a}.data 2> /dev/null) || log_err "Could not collect [bluetooth status] on ${a}"
  if [ "${bt_conn}" == "true" ]; then
    bluetooth_connected=1
  else
    bluetooth_connected=0 
  fi

  lo_stat=$(jq -r '.LOR' "${data_dir}"/miner.nebra/${a}.data 2> /dev/null) || log_err "Could not collect [lora status] on ${a}"
  if [ "${lo_stat}" == "true" ]; then
    lora_status=1
  else
    lora_status=0
  fi

  mn_conn=$(jq -r '.MC' "${data_dir}"/miner.nebra/${a}.data 2> /dev/null) || log_err "Could not collect [miner connection status] on ${a}"
  if [ "${mn_conn}" == "true" ]; then
    miner_connected=1
  else
    miner_connected=0
  fi

  re=$(jq -r '.MR' "${data_dir}"/miner.nebra/${a}.data 2> /dev/null) || log_err "Could not collect [relayed status] on ${a}"
  if [ "${re}" == "true" ]; then
    relayed=1
  else
    relayed=0
  fi
}

get_miner_sensecap_name() {
  name=$(jq -r '.data.name' "${data_dir}"/miner.sensecap/${a}.data 2> /dev/null | tr 'A-Z' 'a-z' | sed 's% %-%g') || log_err "Could not collect [name] on ${a}"
}

get_miner_sensecap_data() {
  cputemp=$(jq '.data.cpuTemperature' ${data_dir}/miner.sensecap/${a}.data 2> /dev/null) || log_err "Could not collect [cpu temp] on ${a}"
  cpuused=$(jq '.data.cpuUsed' ${data_dir}/miner.sensecap/${a}.data 2> /dev/null) || log_err "Could not collect [cpu used] on ${a}"
  memtotal=$(jq '.data.memoryTotal' ${data_dir}/miner.sensecap/${a}.data 2> /dev/null) || log_err "Could not collect [memory total] on ${a}"
  memused=$(jq '.data.memoryUsed' ${data_dir}/miner.sensecap/${a}.data 2> /dev/null) || log_err "Could not collect [memory used] on ${a}"
  sdtotal=$(jq '.data.sdTotal' ${data_dir}/miner.sensecap/${a}.data 2> /dev/null) || log_err "Could not collect [sd total] on ${a}"
  sdused=$(jq '.data.sdUsed' ${data_dir}/miner.sensecap/${a}.data 2> /dev/null) || log_err "Could not collect [sd used] on ${a}"
  gain=$(jq '.data.gain' ${data_dir}/miner.sensecap/${a}.data 2> /dev/null) || log_err "Could not collect [atenna gain] on ${a}"
  relayed=$(jq '.data.relayed' ${data_dir}/miner.sensecap/${a}.data 2> /dev/null) || log_err "Could not collect [relayed status] on ${a}"
  healthy=$(jq '.data.isHealth' ${data_dir}/miner.sensecap/${a}.data 2> /dev/null) || log_err "Could not collect [health status] on ${a}"
  totalheight=$(jq '.data.totalHeight' ${data_dir}/miner.sensecap/${a}.data 2> /dev/null) || log_err "Could not collect [total height] on ${a}"
  height=$(jq '.data.height' ${data_dir}/miner.sensecap/${a}.data 2> /dev/null) || log_err "Could not collect [miner height] on ${a}"
  connected=$(jq '.data.connected' ${data_dir}/miner.sensecap/${a}.data 2> /dev/null) || log_err "Could not collect [connected status] on ${a}"
  dialable=$(jq '.data.dialable' ${data_dir}/miner.sensecap/${a}.data 2> /dev/null) || log_err "Could not collect [dialable status] on ${a}"
  nattype=$(jq '.data.natType' ${data_dir}/miner.sensecap/${a}.data 2> /dev/null)   || log_err "Could not collect [nat type] on ${a}"
  gap=$((height - totalheight))
}
