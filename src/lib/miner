get_miner_elasticsearch() {
  if [[ "${collector_storage_profile}" == *"elasticsearch"* ]] && [ "${elasticsearch_url}" ]; then
    get_curl_options
    es_payload=$(curl ${curl_options} -H "apikey: ${client_api_key}" -H "Content-Type: application/json" "${elasticsearch_url}/hnt-${client_api_key,,}/_search?q=_id:${miner}.${a}.${search}" | jq '.hits.hits[]._source' 2>/dev/null) || log_err "could not retrieve [activity] elasticsearch results"
  fi
}

get_actual_height() {
  get_height
  helium_height=${height}
}

get_miner_bobcat_name() {
  if [[ "${collector_storage_profile}" == *"local"* ]] || [ ! "${collector_storage_profile}" ]; then
    name=$(jq -r '.animal' "${data_dir}"/miner.bobcat/${a}.miner 2> /dev/null)  || log_warn "No name found for ${a}"
  fi
  
  if [[ "${collector_storage_profile}" == *"elasticsearch"* ]] && [ "${elasticsearch_url}" ]; then
    search=collector.bobcat.miner
    get_miner_elasticsearch
    name=$(jq -r '.animal' <<< "${es_payload}" 2> /dev/null)  || log_warn "No name found for ${a}"
  fi

  if [ ! "${name}" ]; then
    name=$(curl -s http://${a}/ | grep "/header" | sed 's%.*> \(.*\)</.*%\1%;s% %-%g' | tr 'A-Z' 'a-z') || log_err "Could not collect [name] on ${a}"
  fi

  name=${name:-"unknown"}
}

get_miner_bobcat_temp() {
  if [[ "${collector_storage_profile}" == *"local"* ]] || [ ! "${collector_storage_profile}" ]; then
    val=($(jq -r -c '.temp0, .temp1' "${data_dir}"/miner.bobcat/${a}.temp 2>/dev/null)) || log_err "Could not collect [temps] on ${a}"
  fi

  if [[ "${collector_storage_profile}" == *"elasticsearch"* ]] && [ "${elasticsearch_url}" ]; then
    search=collector.bobcat.temp
    get_miner_elasticsearch
    val=($(jq -r -c '.temp0, .temp1' <<< "${es_payload}" 2>/dev/null)) || log_err "Could not collect [temps] on ${a}"
  fi

  temp0=${val[0]}
  temp1=${val[1]}
}

get_miner_bobcat_status() {
  get_actual_height

  if [[ "${collector_storage_profile}" == *"local"* ]] || [ ! "${collector_storage_profile}" ]; then
    val=($(jq -r '.miner_height, .blockchain_height, .epoch, .status' "${data_dir}"/miner.bobcat/${a}.status 2> /dev/null)) || log_err "Could not collect [status] on ${a}"
  fi
  
  if [[ "${collector_storage_profile}" == *"elasticsearch"* ]] && [ "${elasticsearch_url}" ]; then
    search=collector.bobcat.status
    get_miner_elasticsearch
    val=($(jq -r '.miner_height, .blockchain_height, .epoch, .status' <<< "${es_payload}" 2> /dev/null)) || log_err "Could not collect [status] on ${a}"
  fi

  miner_height=${val[0]}
    
  if [ "${helium_height}" ]; then
    block_height=${helium_height}
  else
    block_height=${val[1]}
  fi
  
  epoch=${val[2]}
  gap=$((block_height - miner_height)) || log_err "Could not collect [height gap] on ${a}"
  stat=${val[3]}
  
  if [ "${gap}" -ge 20 ]; then
    sync_status=0
  else
    if [ "${stat}" == "synced" ]; then
      sync_status=1
    else
      sync_status=0
    fi
  fi
}

get_miner_longap_name() {
  if [[ "${collector_storage_profile}" == *"local"* ]] || [ ! "${collector_storage_profile}" ]; then
    name=$(jq -r '.[].name' "${data_dir}"/miner.longap/${a}.status 2> /dev/null | tr 'A-Z' 'a-z' | sed 's% %-%g') || log_warn "Could not collect [name] on ${a}"
  fi
}

get_miner_longap_data() {
  get_actual_height

  if [[ "${collector_storage_profile}" == *"local"* ]] || [ ! "${collector_storage_profile}" ]; then
    val=($(jq -r -c '.[].helium.blockchain.height, .[].miner.blockHeight, .[].miner.connected' "${data_dir}"/miner.longap/${a}.status 2>/dev/null)) || log_err "Could not collect [status] on ${a}"
  
    if [ "${helium_height}" ]; then
      block_height=${helium_height}
    else
      block_height=${val[0]}
    fi
  
    miner_height=${val[1]}
  
    block_conn=${val[2]}
    if [ "${block_conn}" == "true" ]; then
      block_connected=1
    else
      block_connected=0
    fi
  
    gap=$((block_height - miner_height))
  
    if [ "${gap}" -ge 20 ]; then
      sync_status=0
    else
      sync_status=1
    fi
  fi
}

get_miner_nebra_name() {
  if [[ "${collector_storage_profile}" == *"local"* ]] || [ ! "${collector_storage_profile}" ]; then
    name=$(jq -r '.AN' "${data_dir}"/miner.nebra/${a}.data 2> /dev/null) || log_warn "Could not collect [name] on ${a}"
  fi
}

get_miner_nebra_data() {
  get_actual_height

  if [[ "${collector_storage_profile}" == *"local"* ]] || [ ! "${collector_storage_profile}" ]; then
    val=($(jq -r -c '.BCH, .FR, .MH, .BSP, .BT, .LOR, .MC' "${data_dir}"/miner.nebra/${a}.data 2>/dev/null)) || log_err "Could not collect [status] on ${a}"
  
    if [ "${helium_height}" ]; then
      block_height=${helium_height}
    else
      block_height=${val[0]}
    fi
  
    frequency=${val[1]}
    miner_height=${val[2]}
    gap=$((block_height - miner_height))
    if [ "${gap}" -ge 20 ]; then
      sync_status=0
    else
      sync_status=1
    fi
  
    sync_perc=${val[3]}
    if [[ "${sync_perc}" == *"load"* ]]; then
      sync_percent=0
    else
      sync_percent=${sync_perc}
    fi
  
    bt_conn=${val[4]}
    if [ "${bt_conn}" == "true" ]; then
      bluetooth_connected=1
    else
      bluetooth_connected=0 
    fi
  
    lo_stat=${val[5]}
    if [ "${lo_stat}" == "true" ]; then
      lora_status=1
    else
      lora_status=0
    fi
  
    mn_conn=${val[6]}
    if [ "${mn_conn}" == "yes" ]; then
      miner_connected=1
    else
      miner_connected=0
    fi
  fi
}

get_miner_sensecap_name() {
  if [[ "${collector_storage_profile}" == *"local"* ]] || [ ! "${collector_storage_profile}" ]; then
    name=$(jq -r '.data.name' "${data_dir}"/miner.sensecap/${a}.data 2> /dev/null | tr 'A-Z' 'a-z' | sed 's% %-%g') || log_err "Could not collect [name] on ${a}"
  fi
}

get_miner_sensecap_data() {
  get_actual_height

  if [[ "${collector_storage_profile}" == *"local"* ]] || [ ! "${collector_storage_profile}" ]; then
    val=($(jq -r -c '.data.cpuTemperature, .data.cpuUsed, .data.memoryTotal, .data.memoryUsed, .data.sdTotal, .data.sdUsed, .data.gain, .data.isHealth, .data.totalHeight, .data.height, .data.connected, .data.dialable, .data.natType' "${data_dir}"/miner.sensecap/${a}.data 2>/dev/null)) || log_err "Could not collect [status] on ${a}"
  
    cputemp=${val[0]}
    cpuused=${val[1]}
    memtotal=${val[2]}
    memused=${val[3]}
    sdtotal=${val[4]}
    sdused=${val[5]}
    gain=${val[6]}
    healthy=${val[7]}
  
    if [ "${helium_height}" ]; then
      block_height=${helium_height}
    else
      block_height=${val[8]}
    fi
  
    miner_height=${val[9]}
    p2p_connected=${val[10]}
    dialable=${val[11]}
    nattype=${val[12]}
    gap=$((block_height - miner_height))
    if [ "${gap}" -ge 20 ]; then
      sync_status=0
    else
      sync_status=1
    fi
  fi
}
