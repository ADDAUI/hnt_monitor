get_actual_height() {
  helium_height=$(jq -r '.data.height' "${data_dir}/height" 2>/dev/null) || log_err "could not retrieve block height"
}

get_miner_bobcat_name() {
  name=$(jq -r '.animal' "${data_dir}"/miner.bobcat/${a}.miner 2> /dev/null)  || log_warn "No name found for ${a}"
  
  if [ ! "${name}" ]; then
    name=$(curl -s http://${a}/ | grep "/header" | sed 's%.*> \(.*\)</.*%\1%;s% %-%g' | tr 'A-Z' 'a-z') || log_err "Could not collect [name] on ${a}"
  fi
}

get_miner_bobcat_temp() {
  val=($(jq -r -c '.temp0, .temp1' "${data_dir}"/miner.bobcat/${a}.temp 2>/dev/null)) || log_err "Could not collect [temps] on ${a}"
  temp0=${val[0]}
  temp1=${val[1]}
}

get_miner_bobcat_status() {
  get_actual_height
  val=($(jq -r '.miner_height, .blockchain_height, .epoch, .status' "${data_dir}"/miner.bobcat/${a}.status 2> /dev/null)) || log_err "Could not collect [status] on ${a}"
  miner_height=${val[0]}
  
  if [ "${helium_height}" ]; then
    block_height=${helium_height}
  else
    block_height=${val[1]}
  fi

  epoch=${val[2]}
  gap=$((block_height - miner_height)) || log_err "Could not collect [height gap] on ${a}"
  stat=${val[3]}

  if [ "${gap}" -ge 20 ]; then
    sync_status=0
  else
    if [ "${stat}" == "synced" ]; then
      sync_status=1
    else
      sync_status=0
    fi
  fi

}

get_miner_longap_name() {
  name=$(jq -r '.[].name' "${data_dir}"/miner.longap/${a}.status 2> /dev/null) || log_warn "Could not collect [name] on ${a}"
}

get_miner_longap_data() {
  get_actual_height
  if [ "${helium_height}" ]; then
    block_height=${helium_height}
  else
    block_height=$(jq -r '.[].helium.blockchain.height' "${data_dir}"/miner.longap/${a}.status 2> /dev/null) || log_err "Could not collect [block height] on ${a}"
  fi

  miner_height=$(jq -r '.[].miner.blockHeight' "${data_dir}"/miner.longap/${a}.status 2> /dev/null) || log_err "Could not collect [miner height] on ${a}"

  block_conn=$(jq -r '.[].miner.connected' "${data_dir}"/miner.longap/${a}.status 2> /dev/null) || log_err "Could not collect [connection status] on ${a}"
  if [ "${block_conn}" == "true" ]; then
    block_connected=1
  else
    block_connected=0
  fi

  gap=$((block_height - miner_height))

  online_stat=$(jq -r '.[].status' "${data_dir}"/miner.longap/${a}.status 2> /dev/null) || log_err "Could not collect [status] on ${a}"
  if [ "${online_stat}" == "online" ]; then
    online_status=1
  else
    online_status=0
  fi

  if [ "${gap}" -ge 20 ]; then
    sync_status=0
  else
    sync_status=1
  fi
}

get_miner_nebra_name() {
  name=$(jq -r '.AN' "${data_dir}"/miner.nebra/${a}.data 2> /dev/null) || log_warn "Could not collect [name] on ${a}"
}

get_miner_nebra_data() {
  get_actual_height

  if [ "${helium_height}" ]; then
    block_height=${helium_height}
  else
    block_height=$(jq -r '.BCH' "${data_dir}"/miner.nebra/${a}.data 2> /dev/null) || log_err "Could not collect [block height] on ${a}"
  fi

  frequency=$(jq -r '.FR' "${data_dir}"/miner.nebra/${a}.data 2> /dev/null)  || log_err "Could not collect [frequency] on ${a}"
  miner_height=$(jq -r '.MH' "${data_dir}"/miner.nebra/${a}.data 2> /dev/null) || log_err "Could not collect [miner height] on ${a}"
  gap=$((block_height - miner_height))
  if [ "${gap}" -ge 20 ]; then
    sync_status=0
  else
    sync_status=1
  fi

  sync_perc=$(jq -r '.BSP' "${data_dir}"/miner.nebra/${a}.data 2> /dev/null) || log_err "Could not collect [status] on ${a}"
  if [[ "${sync_perc}" == *"load"* ]]; then
    sync_percent=0
  else
    sync_percent=${sync_perc}
  fi

  bt_conn=$(jq -r '.BT' "${data_dir}"/miner.nebra/${a}.data 2> /dev/null) || log_err "Could not collect [bluetooth status] on ${a}"
  if [ "${bt_conn}" == "true" ]; then
    bluetooth_connected=1
  else
    bluetooth_connected=0 
  fi

  lo_stat=$(jq -r '.LOR' "${data_dir}"/miner.nebra/${a}.data 2> /dev/null) || log_err "Could not collect [lora status] on ${a}"
  if [ "${lo_stat}" == "true" ]; then
    lora_status=1
  else
    lora_status=0
  fi

  mn_conn=$(jq -r '.MC' "${data_dir}"/miner.nebra/${a}.data 2> /dev/null) || log_err "Could not collect [miner connection status] on ${a}"
  if [ "${mn_conn}" == "yes" ]; then
    miner_connected=1
  else
    miner_connected=0
  fi

  re=$(jq -r '.MR' "${data_dir}"/miner.nebra/${a}.data 2> /dev/null) || log_err "Could not collect [relayed status] on ${a}"
  if [ "${re}" == "true" ]; then
    relayed=1
  else
    relayed=0
  fi
}

get_miner_sensecap_name() {
  name=$(jq -r '.data.name' "${data_dir}"/miner.sensecap/${a}.data 2> /dev/null | tr 'A-Z' 'a-z' | sed 's% %-%g') || log_err "Could not collect [name] on ${a}"
}

get_miner_sensecap_data() {
  get_actual_height
  cputemp=$(jq '.data.cpuTemperature' ${data_dir}/miner.sensecap/${a}.data 2> /dev/null) || log_err "Could not collect [cpu temp] on ${a}"
  cpuused=$(jq '.data.cpuUsed' ${data_dir}/miner.sensecap/${a}.data 2> /dev/null) || log_err "Could not collect [cpu used] on ${a}"
  memtotal=$(jq '.data.memoryTotal' ${data_dir}/miner.sensecap/${a}.data 2> /dev/null) || log_err "Could not collect [memory total] on ${a}"
  memused=$(jq '.data.memoryUsed' ${data_dir}/miner.sensecap/${a}.data 2> /dev/null) || log_err "Could not collect [memory used] on ${a}"
  sdtotal=$(jq '.data.sdTotal' ${data_dir}/miner.sensecap/${a}.data 2> /dev/null) || log_err "Could not collect [sd total] on ${a}"
  sdused=$(jq '.data.sdUsed' ${data_dir}/miner.sensecap/${a}.data 2> /dev/null) || log_err "Could not collect [sd used] on ${a}"
  gain=$(jq '.data.gain' ${data_dir}/miner.sensecap/${a}.data 2> /dev/null) || log_err "Could not collect [atenna gain] on ${a}"
  relayed=$(jq '.data.relayed' ${data_dir}/miner.sensecap/${a}.data 2> /dev/null) || log_err "Could not collect [relayed status] on ${a}"
  healthy=$(jq '.data.isHealth' ${data_dir}/miner.sensecap/${a}.data 2> /dev/null) || log_err "Could not collect [health status] on ${a}"

  if [ "${helium_height}" ]; then
    block_height=${helium_height}
  else
    block_height=$(jq '.data.totalHeight' ${data_dir}/miner.sensecap/${a}.data 2> /dev/null) || log_err "Could not collect [total height] on ${a}"
  fi

  miner_height=$(jq '.data.height' ${data_dir}/miner.sensecap/${a}.data 2> /dev/null) || log_err "Could not collect [miner height] on ${a}"
  p2p_connected=$(jq '.data.connected' ${data_dir}/miner.sensecap/${a}.data 2> /dev/null) || log_err "Could not collect [connected status] on ${a}"
  dialable=$(jq '.data.dialable' ${data_dir}/miner.sensecap/${a}.data 2> /dev/null) || log_err "Could not collect [dialable status] on ${a}"
  nattype=$(jq '.data.natType' ${data_dir}/miner.sensecap/${a}.data 2> /dev/null)   || log_err "Could not collect [nat type] on ${a}"
  gap=$((block_height - miner_height))
  if [ "${gap}" -ge 20 ]; then
    sync_status=0
  else
    sync_status=1
  fi
}
