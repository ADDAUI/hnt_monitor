#!/usr/bin/env bash

set -euo pipefail

export PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/root/bin

SOURCE="${BASH_SOURCE[0]}"
while [ -h "$SOURCE" ]; do # resolve $SOURCE until the file is no longer a symlink
  DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
  SOURCE="$(readlink "$SOURCE")"
  [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE" # if $SOURCE was a relative symlink, we need to resolve it relative to the path where the symlink file was located
done
DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
cd ${DIR}

for c in ../conf/*.conf; do
  . "${c}"
done

if [ ${trace} == "true" ]; then
  set -x
fi


addresses=$(< ../conf/address.list)
current_day=$(date +%Y-%m-%d -u)
current_time=$(date +%H:%M -u)
timestamp_30d=$(date +%Y-%m-%d -u --date="30 days ago")
id=reward_total

reward_total() {
  echo "$(date +%Y-%m-%dT%H:%M:%S) [INFO] [$id]: getting data" >> "${logpath}/${logfile}"

  rewards_15m=0
  rewards_1h=0
  rewards_1d=0
  rewards_7d=0
  rewards_30d=0

  rewards=$(jq -r '.data[].timestamp' <<< "${data}")
  hour=$(echo "${current_time}" | awk -F ':' '{print $1}')
  minute=$(echo "${current_time}" | awk -F ':' '{print $2}')

  [ "${debug}" == "true" ] && echo -e "$(date +%Y-%m-%dT%H:%M:%S) [DEBUG]: rewards timestamps\n${rewards}\n\n" >> "${logpath}/${logfile}"
  [ "${debug}" == "true" ] && echo -e "$(date +%Y-%m-%dT%H:%M:%S) [DEBUG]: captured UTC time ${hour}:${minute}" >> "${logpath}/${logfile}"

  for r in ${reward_data}; do
    clean_time=$(echo "${r}" | sed 's%.*T%%;s%\..*%%')
    h=$(echo "${clean_time}" | awk -F ':' '{print $1}')
    m=$(echo "${clean_time}" | awk -F ':' '{print $2}')
    m_loss=$((minute-16))
    rmh=${h}
    rmm=${m}

    if [ "${m_loss}" -lt "0" ]; then
      m_loss=$(echo "${m_loss}" | sed 's%-%%')
      m_loss=$((60-m_loss))
      rmh=${hour}
      rmm=${minute}
    fi
    
    if [ "${rmh}" -eq "${hour}" ] && [ "${rmm}" -le "${minute}" ] && [ "${m}" -ge "${m_loss}" ]; then
      ((rewards_15m++)) || true
    fi

    if [ "${h}" -eq "${hour}" ]; then
      ((rewards_1h++)) || true
    fi

    if [[ "${r}" == *"${current_day}"* ]]; then
      ((rewards_1d++)) || true
    fi

    ((rewards_7d++)) || true
    ((rewards_30d++)) || true
    rewards=$(echo "${rewards}" | sed "s%${r}%%")
    [ "${debug}" == "true" ] && echo -e "$(date +%Y-%m-%dT%H:%M:%S) [DEBUG]: verifying reward timestamp ${r}" >> "${logpath}/${logfile}"
    [ "${debug}" == "true" ] && echo -e "$(date +%Y-%m-%dT%H:%M:%S) [DEBUG]: cleaning up timestamp ${clean_time}" >> "${logpath}/${logfile}"
    [ "${debug}" == "true" ] && echo -e "$(date +%Y-%m-%dT%H:%M:%S) [DEBUG]: clean timestamp H(${h}) M(${m})" >> "${logpath}/${logfile}"
    [ "${debug}" == "true" ] && echo -e "$(date +%Y-%m-%dT%H:%M:%S) [DEBUG]: setting 15 minute maximum float ${m_loss}" >> "${logpath}/${logfile}"
    [ "${debug}" == "true" ] && echo -e "$(date +%Y-%m-%dT%H:%M:%S) [DEBUG]: minute data verification ${m} less than or equal to ${minute} and greater than or equal to ${m_loss}" >> "${logpath}/${logfile}"
    [ "${debug}" == "true" ] && echo -e "$(date +%Y-%m-%dT%H:%M:%S) [DEBUG]: hour data verification ${h} equals ${hour}" >> "${logpath}/${logfile}"
    [ "${debug}" == "true" ] && echo -e "$(date +%Y-%m-%dT%H:%M:%S) [DEBUG]: day data verification reward timestamp ${r} is in current day ${current_day}" >> "${logpath}/${logfile}"
    [ "${debug}" == "true" ] && echo -e "$(date +%Y-%m-%dT%H:%M:%S) [DEBUG]: removing ${r} from the rewards list" >> "${logpath}/${logfile}"
    [ "${debug}" == "true" ] && echo -e "$(date +%Y-%m-%dT%H:%M:%S) [DEBUG]: remaining rewards timestamps\n${rewards}\n\n" >> "${logpath}/${logfile}"
  done

  rewards_1hour=$(echo "${rewards}" | grep "${current_day}" | sed 's%.*T%%;s%:.*%%' | grep "${hour}" | wc -l | tr -dc .[:print:]. || echo 0)
  rewards_1h=$((rewards_1h + rewards_1hour))

  rewards_1day=$(echo "${rewards}" | grep "${current_day}" | wc -l | tr -dc .[:print:]. || echo 0)
  rewards_1d=$((rewards_1d + rewards_1day))

  rewards_7day=$(echo "${rewards}" | grep "${current_day}\|$(date +%Y-%m-%d --date="1 day ago" -u)\|$(date +%Y-%m-%d --date="2 days ago" -u)\|$(date +%Y-%m-%d --date="3 days ago" -u)\|$(date +%Y-%m-%d --date="4 days ago" -u)\|$(date +%Y-%m-%d --date="5 days ago" -u)\|$(date +%Y-%m-%d --date="6 days ago" -u)\|$(date +%Y-%m-%d --date="7 days ago" -u)" | wc -l | tr -dc .[:print:]. || echo 0)
  rewards_7d=$((rewards_7d + rewards_7day))

  rewards_30day=$(echo "${rewards}" | wc -l | tr -dc .[:print:]. || echo 0)
  rewards_30d=$((rewards_30d + rewards_30day))

  [ "${debug}" == "true" ] && echo -e "$(date +%Y-%m-%dT%H:%M:%S) [DEBUG]: rewards in 15 minute ${rewards_15m}" >> "${logpath}/${logfile}"
  [ "${debug}" == "true" ] && echo -e "$(date +%Y-%m-%dT%H:%M:%S) [DEBUG]: rewards in 1 hour ${rewards_1h}" >> "${logpath}/${logfile}"
  [ "${debug}" == "true" ] && echo -e "$(date +%Y-%m-%dT%H:%M:%S) [DEBUG]: rewards in 1 day ${rewards_1d}" >> "${logpath}/${logfile}"
  [ "${debug}" == "true" ] && echo -e "$(date +%Y-%m-%dT%H:%M:%S) [DEBUG]: rewards in 7 days ${rewards_7d}" >> "${logpath}/${logfile}"
  [ "${debug}" == "true" ] && echo -e "$(date +%Y-%m-%dT%H:%M:%S) [DEBUG]: rewards in 30 days ${rewards_30d}" >> "${logpath}/${logfile}"

  cat <<EOF | curl -s --data-binary @- http://${prometheus_pg_host}:${prometheus_pg_port}/metrics/job/${project}
# HELP ${project}_reward_15m total rewards by hour
# TYPE ${project}_reward_15m gauge
${project}_reward_15m{instance="${name}",address="${a}"} ${rewards_15m}
# HELP ${project}_reward_1h total rewards by hour
# TYPE ${project}_reward_1h gauge
${project}_reward_1h{instance="${name}",address="${a}"} ${rewards_1h}
# HELP ${project}_reward_1d total rewards in a day
# TYPE ${project}_reward_1d gauge
${project}_reward_1d{instance="${name}",address="${a}"} ${rewards_1d}
# HELP ${project}_reward_7d total rewards in 7 days
# TYPE ${project}_reward_7d gauge
${project}_reward_7d{instance="${name}",address="${a}"} ${rewards_7d}
# HELP ${project}_reward_30d total rewards in 30 days
# TYPE ${project}_reward_30d gauge
${project}_reward_30d{instance="${name}",address="${a}"} ${rewards_30d}
EOF

  echo "$(date +%Y-%m-%dT%H:%M:%S) [INFO]: reward data pushed to http://${prometheus_pg_host}:${prometheus_pg_port}/metrics/job/${project}" >> "${logpath}/${logfile}"
}

witness() {
  echo "$(date +%Y-%m-%dT%H:%M:%S) [INFO]: getting witness data" >> "${logpath}/${logfile}"
  witnessed_count=$(jq '.data[].name' "${data_dir}/${a}/${data_format}.witnessed"  | wc -l)
  witnesses_count=$(jq '.data[].name' "${data_dir}/${a}/${data_format}.witnesses" | wc -l)

  cat <<EOF | curl -s --data-binary @- http://${prometheus_pg_host}:${prometheus_pg_port}/metrics/job/${project}
# HELP ${project}_witnessed miners
# TYPE ${project}_witnessed gauge
${project}_witnessed{instance="${name}",address="${a}"} ${witnessed_count}
# HELP ${project}_witnesses miners
# TYPE ${project}_witnesses gauge
${project}_witnesses{instance="${name}",address="${a}"} ${witnesses_count}
EOF

  echo "$(date +%Y-%m-%dT%H:%M:%S) [INFO]: witness data pushed to http://${prometheus_pg_host}:${prometheus_pg_port}/metrics/job/${project}" >> "${logpath}/${logfile}"
  [ "${debug}" == "true" ] && echo "$(date +%Y-%m-%dT%H:%M:%S) [DEBUG]: witnesses count ${witnesses_count}" >> "${logpath}/${logfile}"
  [ "${debug}" == "true" ] && echo "$(date +%Y-%m-%dT%H:%M:%S) [DEBUG]: witnessed count ${witnessed_count}" >> "${logpath}/${logfile}"
}


if [ "${hotspot_monitor}" == "true" ]; then
  for a in ${addresses}; do
    name=$(jq -r '.data.name' "${data_dir}/${a}/info") || echo "$(date +%Y-%m-%dT%H:%M:%S) [ERROR]: could not get the miner name" >> "${logpath}/${logfile}"

    #reward_total &
  done
else
  [ "${debug}" == "true" ] && echo "$(date +%Y-%m-%dT%H:%M:%S) [DEBUG]: Hotspot monitor collection is disabled. Hint: (hotspot_monitor=false)" >> "${logpath}/${logfile}"
  true
fi
