map $http_apikey $api_client_name {
    default "";

    "CLIENT_ID" "client_one";
}

server {
  access_log /dev/stdout main; # Each API may also log to a separate file

  listen 443 ssl;
  server_name *.hntmonitor.com nginx-api localhost;

  # TLS config
  ssl_certificate      /etc/nginx/ssl/cert.pem;
  ssl_certificate_key  /etc/nginx/ssl/key.pem;
  ssl_session_cache    shared:SSL:10m;
  ssl_session_timeout  5m;
  ssl_ciphers          HIGH:!aNULL:!MD5;
  ssl_protocols        TLSv1.2 TLSv1.3;

  proxy_intercept_errors on;     # Do not send backend errors to the client
  default_type application/json; # If no content-type then assume JSON

  location ~ ^/addresses/_doc/$http_apikey {
      if ($http_apikey = "") {
          return 401; # Unauthorized
      }

      if ($api_client_name = "") {
          return 403; # Forbidden
      }

      proxy_pass http://elasticsearch:9200;
  }

  location ~ ^/addresses {
      limit_except POST {
        deny all;
      }

      if ($http_apikey = "") {
          return 401; # Unauthorized
      }

      if ($api_client_name = "") {
          return 403; # Forbidden
      }

      proxy_pass http://elasticsearch:9200;
  }

  location ~ ^/hnt {
      limit_except POST {
          deny all;
      }

      if ($http_apikey = "") {
          return 401; # Unauthorized
      }

      if ($api_client_name = "") {
          return 403; # Forbidden
      }

      proxy_pass http://elasticsearch:9200;
  }

  location ~ ^/metrics {
      if ($http_apikey = "") {
          return 401; # Unauthorized
      }

      if ($api_client_name = "") {
          return 403; # Forbidden
      }

      proxy_pass http://prometheus_pushgateway:9091;
  }

  location / {
      proxy_pass http://grafana:3000;
  }

  error_page 400 = @400;
  location @400 { return 400 '{"status":400,"message":"Bad request"}\n'; }

  error_page 401 = @401;
  location @401 { return 401 '{"status":401,"message":"Unauthorized"}\n'; }

  error_page 403 = @403;
  location @403 { return 403 '{"status":403,"message":"Forbidden"}\n'; }

  error_page 404 = @404;
  location @404 { return 404 '{"status":404,"message":"Resource not found"}\n'; }
}
